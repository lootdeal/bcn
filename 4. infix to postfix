#include <iostream>
#include <string>
using namespace std;

struct Node {
    char data;
    Node* next;
    Node(char value) : data(value), next(nullptr) {}
};

class Stack {
    Node* top;
public:
    Stack() : top(nullptr) {}
    void push(char value) {
        Node* newNode = new Node(value);
        newNode->next = top;
        top = newNode;
    }
    char pop() {
        if (isEmpty()) return '\0';
        Node* temp = top;
        char poppedValue = top->data;
        top = top->next;
        delete temp;
        return poppedValue;
    }
    char peek() { return isEmpty() ? '\0' : top->data; }
    bool isEmpty() { return top == nullptr; }
    ~Stack() { while (!isEmpty()) pop(); }
};

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isOperand(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9');
}

string infixToPostfix(const string& infix) {
    Stack stack;
    string postfix;
    for (char ch : infix) {
        if (isOperand(ch)) postfix += ch;
        else if (ch == '(') stack.push(ch);
        else if (ch == ')') {
            while (!stack.isEmpty() && stack.peek() != '(') postfix += stack.pop();
            stack.pop();
        } else {
            while (!stack.isEmpty() && precedence(stack.peek()) >= precedence(ch)) postfix += stack.pop();
            stack.push(ch);
        }
    }
    while (!stack.isEmpty()) postfix += stack.pop();
    return postfix;
}

int main() {
    string infixExpression;
    cout << "Enter an infix expression: ";
    cin >> infixExpression;
    cout << "Postfix Expression: " << infixToPostfix(infixExpression) << endl;
    return 0;
}
